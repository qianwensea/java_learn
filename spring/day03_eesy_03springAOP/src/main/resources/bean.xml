<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    配置spring的ioc,把service对象配置进来-->
    <bean id="accountService" class="com.shi.service.impl.AccountServiceImpl"></bean>

<!--    spring中基于xml的AOP配置
            第一步:把它通知的bean也交给spring来管理
            第二步:使用aop:config标签表明开始AOP的配置
            第三步: 使用aop:aspect标签表明配置切面
                        id属性: 给切面提供一个唯一标识
                        ref属性: 是指定通知类bean的id
            第四步: 在aop:aspect标签的内部使用对应的标签来配置通知的类型
                    我们现在示例是让pringtLog方法在切入点方法执行之前执行,所以是前置通知
                    aop:before属性: 表示配置前置通知
                    pointcut属性:  用于指定切入点表达式,该表达式的含义指的是对业务层中哪些方法进行增强

               切入点表达式的写法:
                    关键字: execution(表达式)
                    表达式:
                        访问修饰符  返回值  包名.包名...类名.方法名(参数列表)
                   标准写法:
                        public void com.shi.service.impl.AccountServiceImpl.saveAccount()
                   访问修饰符可以省略
                        void com.shi.service.impl.AccountServiceImpl.saveAccount()
                   返回值可以使用通配符,表示任意返回值
                        * com.shi.service.impl.AccountServiceImpl.saveAccount()
                   包名可以使用通配符,表示任意包.但是有几级包就有写几个*.
                        * *.*.*.*.AccountServiceImpl.saveAccount()
                   包名还可以使用*..表示当前包及其自包
                        * *..AccountServiceImpl.saveAccount()
                   类名和方法名都可以使用通配符
                        * *..*.*()
                   参数列表:
                        可以直接写数据类型:
                            基本类型直接写名称  int
                            引用类型写包名.类名的方式  java.lang.String
                         可以使用通配符表示任意类型,但必须要有参数
                         可以使用..表示有无参数都可
                  全通配写法:
                        * *..*.*(..)
             实际开发中切入点表达式的通常写法:
                    切到业务层实现类下的所有方法
                    * com.shi.service.impl.*.*(..)
-->
<!--    配置Logger类-->
    <bean id="logger" class="com.shi.utils.Logger"></bean>

<!--    配置AOP-->
    <aop:config>
<!--        配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
<!--            配置通知的类型,并且建立通知方法和切入点方法的关联-->
<!--            <aop:before method="printLog" pointcut="execution(public void com.shi.service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*(int))"></aop:before>-->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>-->
            <aop:before method="printLog" pointcut="execution(* com.shi.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>

</beans>